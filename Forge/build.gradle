plugins {
    alias libs.plugins.forgegradle
    alias libs.plugins.librarian
    alias libs.plugins.mixin
    alias libs.plugins.cursegradle
    alias libs.plugins.minotaur
}

base {
    archivesName = "${mod_id}-forge-${libs.versions.minecraft.get()}"
}

minecraft {
    mappings channel: 'parchment', version: "${libs.versions.parchment.minecraft.get()}-${libs.versions.parchment.mappings.get()}-${libs.versions.minecraft.get()}"

    runs {
        client {
            workingDirectory project.file('run')
            ideaModule "${rootProject.name}.${project.name}.main"
            taskName 'Client'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            mods {
                modClientRun {
                    source sourceSets.main
                    source project(":Common").sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run-server')
            ideaModule "${rootProject.name}.${project.name}.main"
            taskName 'Server'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            mods {
                modServerRun {
                    source sourceSets.main
                    source project(":Common").sourceSets.main
                }
            }
        }
    }
}

repositories {
}

dependencies {
    minecraft libs.forge

    annotationProcessor(variantOf(libs.mixin) { classifier 'processor' })

    compileOnly(variantOf(libs.gml) { classifier 'all' })
    runtimeOnly(fg.deobf(variantOf(libs.gml) { classifier 'all' }.get())) {
        exclude module: 'transform'
    }

    runtimeOnly fg.deobf(libs.jsonwrangler.forge.get())
    runtimeOnly libs.mixinextras.forge

    compileOnly fg.deobf(libs.cgl.forge.get())

    compileOnly project(path: ":Common", configuration: "namedElements")
}

tasks.withType(GroovyCompile) {
    source project(":Common").sourceSets.main.allGroovy
}

tasks.withType(JavaCompile) {
    source project(":Common").sourceSets.main.allJava
}

processResources {
    from project(':Common').sourceSets.main.resources
    exclude 'mods.groovy'
}

jar {
    finalizedBy('reobfJar')
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            groupId = project.group
            artifactId base.archivesName.get()
            version = project.version
            artifacts = [jar, sourcesJar]
        }
    }
}

if (System.getenv('CURSEFORGE_KEY')) {
    curseforge {
        apiKey = System.getenv('CURSEFORGE_KEY')
        project {
            id = '887129'
            releaseType = "${project.release_type}"
            addGameVersion libs.versions.minecraft.get()
            addGameVersion 'Forge'
            mainArtifact(tasks.reobfJar) {
                displayName = "Mystery Potions [Forge] v$project.version"
            }
            relations {
                requiredDependency 'gml'
                requiredDependency 'jsonwrangler'
            }
        }
        options {
            forgeGradleIntegration = true
        }
    }

    tasks.curseforge {
        dependsOn tasks.reobfJar
    }
}

if (System.getenv('MODRINTH_KEY')) {
    modrinth {
        token = System.getenv('MODRINTH_KEY')
        projectId = 'tfK7Fz9A'
        versionNumber = "$project.version"
        versionType = "${project.release_type}"
        detectLoaders = false
        uploadFile = tasks.reobfJar

        gameVersions = [libs.versions.minecraft.get()]
        loaders = ['forge']
        dependencies {
            required.project 'gml'
            required.project 'jsonwrangler'
        }
    }

    tasks.modrinth {
        dependsOn tasks.reobfJar
    }
}
